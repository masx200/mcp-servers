import type { ServerResult } from '@modelcontextprotocol/sdk/types.js';
import type { Results, ToolConfig } from '../types';
export * from './cache';
export * from './dayjs';
export * from './http';
export * from './logger';
export * from './rss';
export declare const defineToolConfig: (config: ToolConfig | (() => ToolConfig | Promise<ToolConfig>)) => Promise<ToolConfig>;
export declare const handleErrorResult: (error: unknown) => ServerResult;
export declare const handleSuccessResult: (results: Results, toolName: string) => ServerResult;
export declare const safeJsonParse: <T>(json: string) => T | undefined;
export declare const pick: <T extends Record<string, unknown>, K extends keyof T>(obj: T, keys: K[]) => Pick<T, K>;
export declare const omit: <T extends Record<string, unknown>, K extends keyof T>(obj: T, keys: K[]) => Omit<T, K>;
